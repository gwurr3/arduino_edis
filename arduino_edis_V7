#include <math.h>
// edis controller code.
// Strategy is to make a 2d array, one being rpm, the other being tps, with no hard-coded rpm or tps 
//   information, just a slope/offset/digitization into each one.  (maybe compute as a 0-1 function, 
//   then multiply by the number of rows and columns, then turn into an integer and read that row or column.)

// (ford edis) pip is every tooth, so 36 times per revolution.  At 6000 rpm, that's 3600 pulses per second.
// Measured interval in milliseconds will range from 120mS for 500 rpm to 6mS for 10,000 rpm. 

// HOWEVER! the ford edis module provides a tach output, once per revolution, so at 6000 rpm that's 100 pulses per
//  second.  Way better.

// program continuously reads throttle position.  When a negative interrupt from tach is caught, store microseconds, 
//  then retrieve the array number (which is the pause time in microseconds).  Output pin set high, 
//  delay for required edis signal pause time, pin set low, exit interrupt.  This is blocking but
//  as it should exit far before next interrupt, and timer counter is separate hardware, it should
//  not block anything important.

// EDIS SAW signal ranges from 64 to 1792 microseconds with max resolution of 4 microseconds.  That's 432 steps.  

// I could store the degrees advance in the table, then multiply to generate the values, but why?  
//   I can back-calculate that if necessary.  However, it would make debug for other people easier.

// it is likely that the best way to store the table itself is in external rom.  For initial development probably
//  stored in external flash or eeprom.

/* edis module tach output
rpm	interrupts/sec	seconds 	microseconds	linearized
500	8.333333	0.120000	120000.0000	1
1000	16.66667	0.060000	60000.0000	2
1500	25.00000	0.040000	40000.0000	3
2000	33.333333	0.030000	30000.0000	4
2500	41.66667	0.0240000	24000.0000	5
3000	50.00000	0.020000	20000.0000	6
3500	58.333333	0.017142857	17142.85714	7
4000	66.66667	0.0150000	15000.0000	8
4500	75.00000	0.013333333	13333.33333	9
5000	83.333333	0.0120000	12000.0000	10
5500	91.66667	0.010909091	10909.09091	11
6000	100.00000	0.010000	10000.0000	12
6500	108.333333	0.009230769	9230.769231	13
7000	116.66667	0.008571429	8571.428571	14
7500	125.00000	0.0080000	8000.0000	15
8000	133.333333	0.00750000	7500.0000	16
8500	141.66667	0.007058824	7058.823529	17
9000	150.00000	0.006666667	6666.666667	18
9500	158.333333	0.006315789	6315.789474	19
10000	166.66667	0.0060000	6000.0000	20
*/

#include <AS5040.h>  // code for austrian microsystems magnetic rotary encoder for reading throttle position
AS5040 myAS5040(9,8,7);

#define OSP_SET_WIDTH(cycles) (OCR1B = 0xffff-(cycles-1))

// Fire a one-shot pulse. Use the most recently set width. 
#define OSP_FIRE() (TCNT1 = OCR1B - 1)

// Test if there is currently a pulse still in progress (optional)
#define OSP_INPROGRESS() (TCNT1>0)

// Fire a one-shot pulse with the specified width. 
// Order of operations in calculating m must avoid overflow of the unint16_t.
// TCNT1 starts one count lower than the match value becuase the chip will block any compare on the cycle after setting a TCNT. 
#define OSP_SET_AND_FIRE(cycles) { uint16_t m = 0xffff-(cycles-1); OCR1B=m;TCNT1= m-1;}

// Setup the one-shot pulse generator and initialize with a pulse width that is (cycles) clock counts long
void osp_setup(uint16_t cycles) {
  pinMode(10, OUTPUT); // cheating way to set port pins

  TCCR1B = 0;    // Halt counter by setting clock select bits to 0 (No clock source).
                 // This keeps anything from happening while we get set up
  TCNT1 = 0;     // Start counting at bottom.
                // Set TOP to 0. This effectively keeps us from counting because the counter just keeps resetting back to 0.
  OCR1A = 0;  // We break out of this by manually setting the TCNT higher than 0, in which case it will count all the way up to MAX and then overflow back to 0 and get locked up again.
  OSP_SET_WIDTH(cycles);    // This also makes new OCR values get loaded from the buffer on every clock cycle. 

  TCCR1A = _BV(COM1B1) | _BV(COM1B0) | _BV(WGM10) | _BV(WGM11); // OC1B=Set on Match, clear on BOTTOM. Mode 15 Fast PWM.
  TCCR1B = _BV(WGM12)| _BV(WGM13) | _BV(CS10);         // Start counting now. WGM12=1 to select Fast PWM mode 15
  // com1b1 and com1b0 connect the timer output to the pin, while inverting it, so it's a positive pulse.
  
}
// globals, yech
volatile long PIP_period;    // microseconds between interrupts
volatile long microseconds;  // time between PIP signals
volatile long throttle_position;   // rotary encoder on throttle
int output_pin = 4;          // SAW output
int debug = 0;
boolean interrupt_flag = 0;

void setup()
{
  attachInterrupt(0, count_interrupt, FALLING); // this implicitly sets the pin for interrupt0 to input
  pinMode(output_pin, OUTPUT);  // trigger signal to edis module
  if(debug)
  {
    Serial.begin(9600);  // serial output completely slays any real-time performance
  }
  osp_setup(1); // initialize the oneshot with a 1 pulse (66ns) setting
}

long arbround(long target, long roundval) // round target up/down to nearest roundval value
{	long retval = 0;
	while(retval < (target - roundval))
		retval += roundval;
	if ((target - retval) > ((roundval/2)-1)) // the -1 makes 5 round upwards rather than downwards.
		retval += roundval;
	return retval; 
}


void count_interrupt()
{    
  detachInterrupt(0);
  PIP_period = micros() - microseconds;
  microseconds = micros();
  interrupt_flag = 1;		// this signals the main program that an rpm event occurred.
  attachInterrupt(0, count_interrupt, FALLING);
}

long lookup_delay(long PIP_period, int throttle_position)
{
  long rpm = 1000000/PIP_period;  // I might want to can this and just use pip_period to index rather than RPM, to save a divide.
  if(debug)
  {
  	Serial.print("rpm: ");
  	Serial.println(rpm);
  }
  long rounded_rpm = arbround(rpm, 500);  // rpm rounded to nearest 500 (or however many rpm bins the table has)
  long rounded_tp = arbround(throttle_position, 5); // throttle position 1-1024 rounded to nearest 5.
  // note throttle is likely to only change 30 degrees or so, meaning it'll only use 1/12 the sensor's resolution, so the value will
  //  only be like 1-80.
  if(debug)
  {
  	Serial.print("rounded rpm: ");
  	Serial.print(rounded_rpm);
  	Serial.print(" ,tp: ");
  	Serial.println(rounded_tp);
  }
  
  const int rowsize = 10;  // presumably this is rpm, should eventually be 20 for every 500 rpm
  const int columnsize = 10; // and this is throttle position, should be 1-100 (by 5? or 10?) for 0-full throttle.
  
  int advance[rowsize] [columnsize] = 
  {{ 10,15,20,22,22,22,22,22,22,22},   // this is increasing in rpm across the columns
   { 10,15,20,22,22,22,22,22,22,22},   // and increasing in throttle position down the rows
   { 10,15,20,22,22,22,22,22,22,22},
   { 12,18,20,22,22,23,23,23,24,24},
   { 12,20,23,23,23,25,25,25,25,25},
   { 15,20,25,27,28,29,30,33,34,34},
   { 15,20,25,27,30,32,35,36,36,36},
   { 15,20,25,27,30,32,35,36,36,36},
   { 12,20,25,27,30,32,35,36,36,36},
   { 12,20,25,27,30,32,35,36,36,36}};
  int rows, columns;
  // this should use PIP_period in uS, ranging from 60 down to 2.5.  1/PIP will give a linear function.
  // for example, a linearizing function for 500-10,000 by 500's would be (1000/18)/uS, resulting in a 1-20 
  //  linear function -- see table above.
  rows = int(rounded_rpm / 500);
  columns = int(rounded_tp);
  if (rows < 0) rows = 0;
  if (rows > rowsize-1) rows = rowsize-1;
  if (columns > columnsize-1) columns = columnsize-1;
  if (columns < 0) columns = 0;    // these need to be changed to reflect the size of the array.
  int temperature_retard[] = {0,0,0,0,0,1,1,2,5,10}; // reduce the advance by this much depending on temperature
  int temperature = 0;
  return(advance[rows] [columns] - temperature_retard[temperature]);
}

int throttle_position_read()
{
  int angle; // nmeasured throttle angle
  int offset; // difference between min throttle angle and zero
  int scaling; // map throttle min/max to 0-100
  
  offset = 0; // this will need to be changed based on use -- could be programmed into the 5040's prom.
  scaling = 1; // this, too, will need to be changed
  
  angle = myAS5040.encoder_value(); // this is 1-4096, needs to be converted to a 0-to-100 value, probably.
  angle = (angle - offset) * scaling;
  return angle;
}

void loop()
{
  throttle_position = throttle_position_read();
  if(interrupt_flag)
  {
    interrupt_flag = 0;
    long delaytime = lookup_delay(PIP_period, throttle_position); // call lookup table
    long SAW = 1536*(25.6*delaytime);
    if(debug)
    {
      	Serial.print("PIP: ");
    	Serial.print(PIP_period);
    	Serial.print(", throttle pos: ");
    	Serial.print(throttle_position);
    	Serial.print(" Delay: ");
    	Serial.print(delaytime);
        Serial.print(" SAW: ");
        Serial.println(SAW);
    }
    else
    {
      OSP_SET_AND_FIRE(SAW);
    }
  }
}
